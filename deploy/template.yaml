AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary components to deploy Fraud CRI Frontend onto ECS
  Fargate within an existing VPC and private subnets (imported parameters).
  Fraud Front can be invoked via the public API Gateway on the url in the
  FraudFrontUrl output.
  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  Fraud Front ECS Service
  Fraud Front egress to Fraud API's API Gateway is via a NAT Gateway which
  should have a route in the provided private subnets' route table.
Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(integration)|(staging)|(build)|(dev))
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  IsNotDevelopment: !Or
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
  IsProduction: !Equals [ !Ref Environment, production ]
  IsPerformance: !Or
    - !Equals [ !Ref Environment, production ]
    - !Equals [ !Ref Environment, build ]
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416
  LogLevel:
    Environment:
      dev: "debug"
      build: "debug"
      staging: "request"
      integration: "request"
      production: "request"

Resources:
  # Security Groups for the ECS service and load balancer
  LoadBalancerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Fraud Front LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  LoadBalancerSGEgressToECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt LoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the Fraud Front load balancer and
        the Fraud Front ECS security group
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Fraud Front ECS Security Group permitting outbound
        to anywhere.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  ECSSecurityGroupIngressFromLoadBalancer:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: >-
        Fraud Front ECS permits inbound from the Fraud Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  AccessLogsBucket:
    Condition: IsNotDevelopment
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub fraud-cri-front-${Environment}-access-logs
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  FraudFrontAccessLogsBucketPolicy:
    Condition: IsNotDevelopment
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${AccessLogsBucket}/fraud-front-${Environment}/AWSLogs/${AWS::AccountId}/*

  # Private Application Load Balancer
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
        # This is an alternative implementation if you want to split across all PrivateSubnets (but don't know how many there are)
        # Fn::Split:
        #   [ ",", Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnets" ]
      Type: application
      LoadBalancerAttributes: !If
        - IsNotDevelopment
        - - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
          - Key: access_logs.s3.prefix
            Value: !Sub fraud-front-${Environment}
        - !Ref AWS::NoValue

  LoadBalancerListenerTargetGroupECS:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  #
  #  ElastiCache (for session caching)
  #

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: SubnetGroup for ElastiCache
      SubnetIds:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SubnetGroup"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Fraud CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ElastiCacheParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: redis3.2
      Properties:
        cluster-enabled: "yes"
      Description: Cache parameter group
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-CacheParameterGroup"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Fraud CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ElastiCacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Fraud Front Redis Security Group
      SecurityGroupIngress:
        - Description: Allow inbound on port 6379
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
          FromPort: 6379
          IpProtocol: tcp
          ToPort: 6379
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  ElastiCacheReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: true
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      CacheParameterGroupName: !Ref ElastiCacheParameterGroup
      Engine: redis
      EngineVersion: 3.2.10
      MultiAZEnabled: true
      NumNodeGroups: 1
      ReplicasPerNodeGroup: 1
      ReplicationGroupDescription: Replication group for Elastiache
      SecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ElastiCacheReplicationGroup"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Fraud CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  # ECS cluster, service and task definition
  FraudFrontEcsCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Fraud CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  FraudFrontEcsService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref FraudFrontEcsCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: TRUE
          Rollback: TRUE
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt ECSSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdB"
        # This is an alternative implementation if you want to split across all PrivateSubnets (but don't know how many there are)
        # Fn::Split:
        #   [ ",", Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnets" ]
      TaskDefinition: !Ref ECSServiceTaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Fraud CRI"
        - Key: Environment
          Value: !Sub "${Environment}"
    DependsOn:
      - LoadBalancerListener

  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-FraudFront-ECS
      RetentionInDays: 14

  ECSAccessLogsGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Sub "/aws/ecs/${AWS::StackName}-FraudFront-ECS"
    DependsOn: ECSAccessLogsGroup

  ECSServiceTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: CONTAINER-IMAGE-PLACEHOLDER
          Name: app
          Environment:
            - Name: API_BASE_URL
              Value: !Sub
                - "https://${APIGatewayId}.execute-api.eu-west-2.amazonaws.com/${Environment}"
                - APIGatewayId:
                    Fn::ImportValue: fraud-cri-api-v1-PrivateFraudApiGatewayId
                  Environment: !Ref Environment
            - Name: EXTERNAL_WEBSITE_HOST
              Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
            - Name: SESSION_TABLE_NAME
              Value: !Sub
                - "cri-fraud-front-sessions-${Environment}"
                - Environment: !Ref Environment
            - Name: GTM_ID
              Value: !If [IsProduction, "GTM-TT5HDKV", "GTM-TK92W68"]
            - Name: ANALYTICS_DOMAIN
              Value: !If [IsProduction, "account.gov.uk", !Sub "${Environment}.account.gov.uk"]
            - Name: LOG_LEVEL
              Value: !FindInMap [LogLevel, Environment, !Ref 'Environment']
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group : !Ref ECSAccessLogsGroup
              awslogs-region : !Sub ${AWS::Region}
              awslogs-stream-prefix : !Sub fraud-front-${Environment}
      Cpu: '256'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Fraud CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullFraudFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: FraudFrontDynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt FraudFrontSessionsTable.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ApiGwHttpEndpoint:
      Type: 'AWS::ApiGatewayV2::Api'
      Properties:
          Name: !Sub fraud-front-${Environment}
          ProtocolType: HTTP

  ApiGwHttpEndpointIntegration:
      Type: 'AWS::ApiGatewayV2::Integration'
      Properties:
        ApiId: !Ref ApiGwHttpEndpoint
        IntegrationType: HTTP_PROXY
        ConnectionId:
          Fn::ImportValue:
            !Sub "${VpcStackName}-VpcLinkId"
        ConnectionType: VPC_LINK
        IntegrationMethod: ANY
        IntegrationUri: !Ref LoadBalancerListener
        PayloadFormatVersion: '1.0'

  APIGWRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      RouteKey: 'ANY /{proxy+}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGwHttpEndpointIntegration

  APIStageDefault:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength"
          }
  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-FraudFront-API-GW-AccessLogs

  APIGWAccessLogsGroupSubscriptionFilterCsls:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Sub "/aws/apigateway/${AWS::StackName}-FraudFront-API-GW-AccessLogs"
    DependsOn: APIGWAccessLogsGroup

# ECS Autoscaling
# The number of pods will increase when the configured CPU utilization is breached for more than 3 minutes.
# Scaling down will occur after 15 minutes of 90% utilization of the configured CPU utilization.

  ECSAutoScalingTarget:
    Condition: IsPerformance
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref   FraudFrontEcsCluster
          - !GetAtt FraudFrontEcsService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSAutoScalingPolicy:
    Condition: IsPerformance
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref   FraudFrontEcsCluster
          - !GetAtt FraudFrontEcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0

  FraudFrontSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "cri-fraud-front-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

####################################################################
#                                                                  #
# Alerts                                                           #
#                                                                  #
####################################################################

  FraudNoTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Fraud ${Environment} frontend no ECS service tasks
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlarmTopicFraud
      OKActions:
        - !Ref AlarmTopicFraud
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref FraudFrontEcsCluster
      Period: 60
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  FraudOnlyOneTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Fraud ${Environment} frontend below desired ECS service tasks
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlarmTopicFraud
      OKActions:
        - !Ref AlarmTopicFraud
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref FraudFrontEcsCluster
      Period: 300
      EvaluationPeriods: 3
      DatapointsToAlarm: 3
      Threshold: 2
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  Fraud5XXOnELB:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Fraud ${Environment} frontend 5XX count
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlarmTopicFraud
      OKActions:
        - !Ref AlarmTopicFraud
      InsufficientDataActions: []
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: TargetGroup
          Value: !Ref LoadBalancerListenerTargetGroupECS
        - Name: LoadBalancer
          Value: !Ref LoadBalancer
      Period: 60
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

####################################################################
#                                                                  #
# Alarm setup                                                      #
#                                                                  #
####################################################################

  AlarmTopicFraud:
    Type: AWS::SNS::Topic
    Metadata:
      SamResourceId: AlarmTopicFraud
  AlarmTopicSubscriptionPagerDutyFraud:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:
        Ref: AlarmTopicFraud
      Endpoint:
        Fn::Sub: '{{resolve:ssm:/alerting/pagerduty-fraud/url}}'
      Protocol: https
    Metadata:
      SamResourceId: AlarmTopicSubscriptionPagerDutyFraud
  AlarmPublishToTopicPolicyFraud:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - Ref: AlarmTopicFraud
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource:
              Ref: AlarmTopicFraud
            Principal:
              Service: cloudwatch.amazonaws.com
            Condition:
              ArnLike:
                AWS:SourceArn:
                  Fn::Sub: arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
    Metadata:
      SamResourceId: AlarmPublishToTopicPolicyFraud

# Outputs

Outputs:
  FraudFrontUrl:
    Description: >-
      The API Gateway URL which Fraud Front can be invoked on.
    Value: !GetAtt  ApiGwHttpEndpoint.ApiEndpoint
  FraudFrontGatewayId:
    Description: Fraud Front API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-FraudFrontGatewayId"
    Value: !Ref ApiGwHttpEndpoint
